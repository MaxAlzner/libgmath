
#include <gmath.hpp>
#include <encode.hpp>

int main(int argc, char** argv)
{
	unsigned int i = 0xFF0088AA;
	unsigned char* read = (unsigned char*)&i;
	unsigned char col0 = read[0];
	unsigned char col1 = read[1];
	unsigned char col2 = read[2];
	unsigned char col3 = read[3];
	Encoded4Bytes b = i;

	int i0 = clamp(1, 3, 4);
	int i1 = module(5, 2);
	swap(i0, i1);
	int i2 = interp(0.4f, 1, 5);
	int i3 = sign(-1);
	int i4 = abs(i3);
	float rad0 = radians(60.0f);
	float deg0 = degrees(0.4f);
	int i5 = max(i0, i1, i2);
	int i6 = min(i4, i3, i2);
	double d0 = truth(0.3);
	double d1 = not(0.4);
	double d2 = and(0.1, 0.3);
	double d3 = or(0.2, 0.4);
	double d4 = xor(0.3, 0.1);

	vec2 v200;
	vec2 v201(1.0f);
	vec2 v202(1.0f, 1.0f);
	vec2 v203(vec2(1.0f));
	vec2 v204(vec3(1.0f));
	vec2 v205(vec4(1.0f));
	int v2len = v201.length();
	vec2 v206 = vec2(1.0f);
	float* vec2flat = vec2(1.0f);
	v206 += vec2(1.0f);
	v206 += 1.0f;
	v206 -= vec2(1.0f);
	v206 -= 1.0f;
	v206 *= vec2(1.0f);
	v206 *= 1.0f;
	v206 /= vec2(1.0f);
	v206 /= 1.0f;
	bool v2cmp0 = vec2(1.0f) == vec2(1.0f);
	bool v2cmp1 = vec2(1.0f) != vec2(1.0f);
	bool v2cmp2 = vec2(1.0f) > vec2(1.0f);
	bool v2cmp3 = vec2(1.0f) < vec2(1.0f);
	bool v2cmp4 = vec2(1.0f) >= vec2(1.0f);
	bool v2cmp5 = vec2(1.0f) <= vec2(1.0f);
	float v2x = v203[0];
	vec2 v207 = vec2(1.0f) + vec2(1.0f);
	vec2 v208 = vec2(1.0f) + 1.0f;
	vec2 v209 = 1.0f + vec2(1.0f);
	vec2 v210 = vec2(1.0f) - vec2(1.0f);
	vec2 v211 = vec2(1.0f) - 1.0f;
	vec2 v212 = 1.0f - vec2(1.0f);
	vec2 v213 = vec2(1.0f) * vec2(1.0f);
	vec2 v214 = vec2(1.0f) * 1.0f;
	vec2 v215 = 1.0f * vec2(1.0f);
	vec2 v216 = vec2(1.0f) / vec2(1.0f);
	vec2 v217 = vec2(1.0f) / 1.0f;
	vec2 v218 = 1.0f / vec2(1.0f);
	
	vec3 v300;
	vec3 v301(1.0f);
	vec3 v302(1.0f, 1.0f, 1.0f);
	vec3 v303(vec2(1.0f), 1.0f);
	vec3 v304(1.0f, vec2(1.0f));
	vec3 v305(vec3(1.0f));
	vec3 v306(vec4(1.0f));
	int v3len = v301.length();
	vec3 v307 = vec3(1.0f);
	float* vec3flat = vec3(1.0f);
	v307 += vec3(1.0f);
	v307 += 1.0f;
	v307 -= vec3(1.0f);
	v307 -= 1.0f;
	v307 *= vec3(1.0f);
	v307 *= 1.0f;
	v307 /= vec3(1.0f);
	v307 /= 1.0f;
	bool v3cmp0 = vec3(1.0f) == vec3(1.0f);
	bool v3cmp1 = vec3(1.0f) != vec3(1.0f);
	bool v3cmp2 = vec3(1.0f) > vec3(1.0f);
	bool v3cmp3 = vec3(1.0f) < vec3(1.0f);
	bool v3cmp4 = vec3(1.0f) >= vec3(1.0f);
	bool v3cmp5 = vec3(1.0f) <= vec3(1.0f);
	float v3x = v303[0];
	vec3 v308 = vec3(1.0f) + vec3(1.0f);
	vec3 v309 = vec3(1.0f) + 1.0f;
	vec3 v310 = 1.0f + vec3(1.0f);
	vec3 v311 = vec3(1.0f) - vec3(1.0f);
	vec3 v312 = vec3(1.0f) - 1.0f;
	vec3 v313 = 1.0f - vec3(1.0f);
	vec3 v314 = vec3(1.0f) * vec3(1.0f);
	vec3 v315 = vec3(1.0f) * 1.0f;
	vec3 v316 = 1.0f * vec3(1.0f);
	vec3 v317 = vec3(1.0f) / vec3(1.0f);
	vec3 v318 = vec3(1.0f) / 1.0f;
	vec3 v319 = 1.0f / vec3(1.0f);
	
	vec4 v400;
	vec4 v401(1.0f);
	vec4 v402(1.0f, 1.0f, 1.0f, 1.0f);
	vec4 v403(vec2(1.0f), 1.0f, 1.0f);
	vec4 v404(1.0f, vec2(1.0f), 1.0f);
	vec4 v405(1.0f, 1.0f, vec2(1.0f));
	vec4 v406(vec3(1.0f), 1.0f);
	vec4 v407(1.0f, vec3(1.0f));
	vec4 v408(vec4(1.0f));
	int v4len = v401.length();
	vec4 v409 = vec4(1.0f);
	float* vec4flat = vec4(1.0f);
	v409 += vec4(1.0f);
	v409 += 1.0f;
	v409 -= vec4(1.0f);
	v409 -= 1.0f;
	v409 *= vec4(1.0f);
	v409 *= 1.0f;
	v409 /= vec4(1.0f);
	v409 /= 1.0f;
	bool v4cmp0 = vec4(1.0f) == vec4(1.0f);
	bool v4cmp1 = vec4(1.0f) != vec4(1.0f);
	bool v4cmp2 = vec4(1.0f) > vec4(1.0f);
	bool v4cmp3 = vec4(1.0f) < vec4(1.0f);
	bool v4cmp4 = vec4(1.0f) >= vec4(1.0f);
	bool v4cmp5 = vec4(1.0f) <= vec4(1.0f);
	float v4x = v403[0];
	vec4 v410 = vec4(1.0f) + vec4(1.0f);
	vec4 v411 = vec4(1.0f) + 1.0f;
	vec4 v412 = 1.0f + vec4(1.0f);
	vec4 v413 = vec4(1.0f) - vec4(1.0f);
	vec4 v414 = vec4(1.0f) - 1.0f;
	vec4 v415 = 1.0f - vec4(1.0f);
	vec4 v416 = vec4(1.0f) * vec4(1.0f);
	vec4 v417 = vec4(1.0f) * 1.0f;
	vec4 v418 = 1.0f * vec4(1.0f);
	vec4 v419 = vec4(1.0f) / vec4(1.0f);
	vec4 v420 = vec4(1.0f) / 1.0f;
	vec4 v421 = 1.0f / vec4(1.0f);

	float mag0 = magnitude(vec2(1.0f));
	float mag1 = magnitude(vec3(1.0f));
	float mag2 = magnitude(vec4(1.0f));
	float dist0 = distance(vec2(1.0f), vec2(1.0f));
	float dist1 = distance(vec3(1.0f), vec3(1.0f));
	float dist2 = distance(vec4(1.0f), vec4(1.0f));
	vec2 norm0 = normalize(vec2(1.0));
	vec3 norm1 = normalize(vec3(1.0));
	vec4 norm2 = normalize(vec4(1.0));
	vec4 hom0 = homogenize(vec4(1.0f));
	vec4 hom1 = homogenize(vec4(1.0f, 1.0f, 1.0f, 0.0f));
	float dot0 = dot(vec2(1.0f), vec2(1.0f));
	float dot1 = dot(vec3(1.0f), vec3(1.0f));
	float dot2 = dot(vec4(1.0f), vec4(1.0f));
	vec3 cross0 = cross(vec3(1.0f), vec3(1.0f));
	vec3 refl0 = reflect(vec3(1.0f), vec3(1.0f));
	vec3 refr0 = refract(vec3(1.0f), vec3(1.0f), PI);
	vec2 mx0 = max(vec2(1.0f), vec2(1.0f));
	vec3 mx1 = max(vec3(1.0f), vec3(1.0f));
	vec4 mx2 = max(vec4(1.0f), vec4(1.0f));
	vec2 mx3 = max(vec2(1.0f), vec2(1.0f), vec2(1.0f));
	vec3 mx4 = max(vec3(1.0f), vec3(1.0f), vec3(1.0f));
	vec4 mx5 = max(vec4(1.0f), vec4(1.0f), vec4(1.0f));
	vec2 mn0 = min(vec2(1.0f), vec2(1.0f));
	vec3 mn1 = min(vec3(1.0f), vec3(1.0f));
	vec4 mn2 = min(vec4(1.0f), vec4(1.0f));
	vec2 mn3 = min(vec2(1.0f), vec2(1.0f), vec2(1.0f));
	vec3 mn4 = min(vec3(1.0f), vec3(1.0f), vec3(1.0f));
	vec4 mn5 = min(vec4(1.0f), vec4(1.0f), vec4(1.0f));
	//vec2 clamp0 = clamp(vec2(1.0f), 0.0f, 1.0f);
	//vec3 clamp1 = clamp(vec3(1.0f), 0.0f, 1.0f);
	//vec4 clamp2 = clamp(vec4(1.0f), 0.0f, 1.0f);
	//vec2 mod0 = module(vec2(1.0f), 1.0f);
	//vec3 mod1 = module(vec3(1.0f), 1.0f);
	//vec4 mod2 = module(vec4(1.0f), 1.0f);
	vec2 lerp0 = lerp(vec2(1.0f), vec2(1.0f), 0.5f);
	vec3 lerp1 = lerp(vec3(1.0f), vec3(1.0f), 0.5f);
	vec4 lerp2 = lerp(vec4(1.0f), vec4(1.0f), 0.5f);
	vec2 slerp0 = slerp(vec2(1.0f), vec2(1.0f), 0.5f);
	vec3 slerp1 = slerp(vec3(1.0f), vec3(1.0f), 0.5f);
	vec4 slerp2 = slerp(vec4(1.0f), vec4(1.0f), 0.5f);

	mat3 m300;
	mat3 m301(2.0f);
	mat3 m302(vec3(1.0f), vec3(2.0f), vec3(3.0f));
	mat3 m303(mat3(1.0f));
	mat3 m304(mat4(1.0f));
	int mat3col = m301.columns();
	int mat3row = m301.rows();
	mat3 m305 = mat3(1.0f);
	float* m3flat = mat3(1.0f);
	mat3 m307;
	m307 += mat3(1.0f);
	mat3 m308;
	m308 += 1.0f;
	mat3 m309;
	m309 -= mat3(1.0f);
	mat3 m310;
	m310 -= 1.0f;
	mat3 m311;
	m311 *= mat3(1.0f);
	mat3 m312;
	m312 *= 1.0f;
	mat3 m313;
	m313 /= mat3(1.0f);
	mat3 m314;
	m314 /= 1.0f;
	vec3 m3c0 = m302[0];
	mat3 m315 = mat3(1.0f) + mat3(1.0f);
	mat3 m316 = mat3(1.0f) + 1.0f;
	mat3 m317 = 1.0f + mat3(1.0f);
	mat3 m318 = mat3(1.0f) - mat3(1.0f);
	mat3 m319 = mat3(1.0f) - 1.0f;
	mat3 m320 = 1.0f - mat3(1.0f);
	mat3 m321 = mat3(1.0f) * mat3(1.0f);
	vec3 m322 = mat3(1.0f) * vec3(1.0f);
	vec3 m323 = vec3(1.0f) * mat3(1.0f);
	mat3 m324 = mat3(1.0f) * 1.0f;
	mat3 m325 = 1.0f * mat3(1.0f);
	mat3 m326 = mat3(1.0f) / mat3(1.0f);
	vec3 m327 = mat3(1.0f) / vec3(1.0f);
	vec3 m328 = vec3(1.0f) / mat3(1.0f);
	mat3 m329 = mat3(1.0f) / 1.0f;
	mat3 m330 = 1.0f / mat3(1.0f);

	mat4 m400;
	mat4 m401(2.0f);
	mat4 m402(vec4(1.0f), vec4(2.0f), vec4(3.0f), vec4(4.0f));
	mat4 m403(mat3(1.0f));
	mat4 m404(mat4(1.0f));
	int mat4col = m401.columns();
	int mat4row = m401.rows();
	mat4 m405 = mat4(1.0f);
	float* m4flat = mat4(1.0f);
	mat4 m407;
	m407 += mat4(1.0f);
	mat4 m408;
	m408 += 1.0f;
	mat4 m409;
	m409 -= mat4(1.0f);
	mat4 m410;
	m410 -= 1.0f;
	mat4 m411;
	m411 *= mat4(1.0f);
	mat4 m412;
	m412 *= 1.0f;
	mat4 m413;
	m413 /= mat4(1.0f);
	mat4 m414;
	m414 /= 1.0f;
	vec4 m4c0 = m402[0];
	mat4 m415 = mat4(1.0f) + mat4(1.0f);
	mat4 m416 = mat4(1.0f) + 1.0f;
	mat4 m417 = 1.0f + mat4(1.0f);
	mat4 m418 = mat4(1.0f) - mat4(1.0f);
	mat4 m419 = mat4(1.0f) - 1.0f;
	mat4 m420 = 1.0f - mat4(1.0f);
	mat4 m421 = mat4(1.0f) * mat4(1.0f);
	vec4 m422 = mat4(1.0f) * vec4(1.0f);
	vec4 m423 = vec4(1.0f) * mat4(1.0f);
	mat4 m424 = mat4(1.0f) * 1.0f;
	mat4 m425 = 1.0f * mat4(1.0f);
	mat4 m426 = mat4(1.0f) / mat4(1.0f);
	vec4 m427 = mat4(1.0f) / vec4(1.0f);
	vec4 m428 = vec4(1.0f) / mat4(1.0f);
	mat4 m429 = mat4(1.0f) / 1.0f;
	mat4 m430 = 1.0f / mat4(1.0f);

	float det0 = determinate(mat3(1.0f));
	float det1 = determinate(mat4(1.0f));
	mat3 inv0 = inverse(mat3(1.0f));
	mat4 inv1 = inverse(mat4(1.0f));
	mat3 tran0 = transpose(mat3(1.0f));
	mat3 tran1 = transpose(mat4(1.0f));
	mat3 t0 = translate(1.0f, 1.0f);
	mat3 t1 = translate(mat3(1.0f), 1.0f, 1.0f);
	mat4 t2 = translate(1.0f, 1.0f, 1.0f);
	mat4 t3 = translate(mat4(1.0f), 1.0f, 1.0f, 1.0f);
	mat3 r0 = rotate2d(180.0f);
	mat3 r1 = rotate2d(mat3(1.0f), 180.0f);
	mat4 r2 = rotateX(180.0f);
	mat4 r3 = rotateX(mat4(1.0f), 180.0f);
	mat4 r4 = rotateY(180.0f);
	mat4 r5 = rotateY(mat4(1.0f), 180.0f);
	mat4 r6 = rotateZ(180.0f);
	mat4 r7 = rotateZ(mat4(1.0f), 180.0f);
	mat4 r8 = rotate(180.0f, vec3(1.0f, 0.0f, 0.0f));
	mat4 r9 = rotate(mat4(1.0f), 180.0f, vec3(1.0f, 0.0f, 0.0f));
	mat3 s0 = scale(1.0f, 1.0f);
	mat3 s1 = scale(mat3(1.0f), 1.0f, 1.0f);
	mat4 s2 = scale(1.0f, 1.0f, 1.0f);
	mat4 s3 = scale(mat4(1.0f), 1.0f, 1.0f, 1.0f);
	mat4 orth0 = orthogonal(-1.0f, 1.0f, 1.0f, -1.0f, 0.1f, 100.0f);
	mat4 orth1 = orthogonal(-1.0f, 1.0f, 1.0f, -1.0f);
	mat4 frust0 = frustum(-1.0f, 1.0f, 1.0f, -1.0f, 0.1f, 100.0f);
	mat4 persp0 = perspective(60.0f, 4.0f / 3.0f, 0.1f, 100.0f);
	vec3 proj0 = project(vec3(0.0f, 1.0f, 0.0f), mat4(1.0f), mat4(1.0f));
	vec3 unproj0 = unproject(vec3(0.0f, 1.0f, 0.0f), mat4(1.0f), mat4(1.0f));
	mat4 look0 = look(vec3(0.0f, 1.0f, 0.0f), vec3(0.0f, 1.0f, 1.0f), vec3(0.0f, 1.0f, 0.0f));

	fuzzy fz0;

	return 0;
}